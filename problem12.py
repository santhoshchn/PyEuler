# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
# 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

def primeSieve(n):
    if n == 1:
        return []
    target = int(n+1)
    primeList = [True] * target
    primeList[0] = primeList[1] = False
    for (i, prime) in enumerate(primeList):
        if prime:
            for j in xrange(2*i,target,i):
                primeList[j] = False
    return [x for (x,y) in filter(lambda (x,y): y == True, enumerate(primeList))]


def trialDivision(n):
    primes = primeSieve(n)
    if n in primes:
        return [n]
    prime_factors = []
    if n == 1:
        return [1]
    for i in primes:
        while n % i == 0:
            prime_factors.append(i)
            n //= i
    return prime_factors

referenceList = []
def triangleNum(n):
    if n < 1:
        return None
    if n == 1:
        referenceList.append(trialDivision(2))
        return (1, 1)
    else:
        z = trialDivision(n+1)
        x = referenceList[-1] + z
        referenceList.append(z)
        x.remove(2)
        product = 1
        for factor in list(set(x)):
            product *= x.count(factor)+1
        return (n*(n+1)/2, product)

i = 1
while triangleNum(i)[1] < 500:
    i+=1
print triangleNum(i)
